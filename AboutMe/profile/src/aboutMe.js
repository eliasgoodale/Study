const aboutMe = 
{
    utsa: "In 2010, after graduating from Health Careers High School, I began attended the University of Texas at San Antonio seeking a bachelors in Public Health Administration. I had no financial support from my family, but was able to pay for school with loans, as well as my apartment and necessities by working as a waiter. Despite having to work and attend school full-time, I was still able to maintain good academic standing with the University.  I became a student leader with the school’s Student Government Association, and became vice president of a sustainability organization on campus called the MVMNT. At the time, the university had a serious problem with graduation rates, some as low as 21%. Contrasting this, was a 74% acceptance rate for new students. One of the rules at UTSA, was that in order to register for each semester’s coursework, students needed to visit one of their guidance counselors to ensure that they were on track for graduation. Guidance counselors and other support staff, swamped with students in a congested pipeline, were unable to offer individual attention or plan courses effectively. On my sixth semester I received a new guidance counselor who, to my surprise, informed me that my previous counselor had not planned my courses correctly, and I was nowhere near graduation. Compounding this problem, the classes I needed to graduate with my bachelor’s degree were sparse, available only every other semester. My loans were contingent on how many hours I was enrolled in school, and I could not get the classes I needed to graduate. On top of this, my loan package that was scheduled to forgive 100% of the costs if I graduated within 4 years was completely ruined. I felt betrayed. At 22 years old, now working nights at a bar, simultaneously giving my free time away to the school’s student government for promotional events, cleaning up trash in the university parking lots and organizing sustainable energy projects with the MVMNT they could “do nothing to help me”. They shamelessly took my hard earned and borrowed money in the name of “Tier 1 status” without a thought as to what that could do to my future. My journey to becoming a software developer started in a dark place. Thankfully my grandfather was able to offer me an opportunity to learn a trade and set me to work as a carpenter in Tyler, Texas.",
    
    carpentry:'“If builders built buildings the way programmers wrote programs, then the first woodpecker that came along would destroy civilization”. At 22 I moved from San Antonio to Tyler, TX, carrying everything I owned in a car with a failing transmission. I remember thinking the car would never make it, that I was crazy for driving over 300 miles in it with everything I own, and being relieved as the car coasted into the driveway of a friend I had not seen in 10 years. After arriving, his family graciously helped me find a room to rent and I began work as a framer. Although physically intense, carpentry and framing especially have a design process that resembles programming in many ways. Houses are not as variable or diverse as programs, but building them requires a distinct spatial intelligence. Almost as if they see an outline traced in thin air, experienced carpenters can follow a blueprint from memory with a quick glance. Over the three years I spent working with my grandfather and his crew I was privy to polished, effective design. When I design software today, the mental model I create of a software system is completely physical in nature. Keeping that model in my head allows me to work on any part of the stack individually, and imagine how that whole part is fitting with the rest of the system. Instead of an architectural blueprint, I write a  <statechart> for every application I build. While unnecessary or ineffective components in software aren’t always immediately obvious, a board out of place in a finished home would draw attention immediately. After understanding the similarities between statecharts and blueprints, I began to leverage my spatial intelligence and design simpler, more effective software.',

    oilField: "Through another friend I landed a job in Oilfield Solids Control at a company that would allow me to work overtime beyond the OSHA safety restrictions. Dangerous work environments, 36 hour shifts without sleep, and driving thousands of miles throughout 5 week hitches were just a few of the challenges I overcame. Even though my job consumed most of my life, on my single week off between hitches, I would practice coding for the month long entrance exam at 42 called “the piscine”, meaning swimming pool in French. The company often had to switch me to different locations so that their hiring producers wouldn’t notice how many continuous 12-hour shifts I worked and call a safety officer. However, the fact that I worked so many days was quickly noticed by the company field managers. To get the most value out of me, the company quickly trained me to maintain, repair, and set up every single piece of solids control equipment they owned. Big bowl centrifuges, shale shakers, class-3 and class-7 forklifts, earthmovers, and diesel pressure washers where just some of the machinery I had the opportunity to learn. As a tech, I never had to call in equipment to our shop mechanic when deployed out on a rig because I could fix the machines with tools and components laying around, and not have to incur the shipping and pick up costs. Within 9 months, I had saved enough to live on for a year and bought a newer car to drive to California. The experience here, of learning to use what’s already present, and how with enough creativity anything can fit together to work correctly has proved valuable to me as a programmer today.",
    
    fortyTwo: "The Piscine consisted of small projects that become available at 8:42am each day and end at 11:42pm the following day. Students start off doing simple projects like creating bash scripts that demonstrate mastery of basic unix cli commands. As the piscine continues, projects move to developing programs and utilities in the C language. Everything is submitted to the school’s private git repository under your profile name, and graded by an automated system called “Moulinette”. A single mistake, and your project instantly receives a grade of zero. During this experience, my preparation and acclamation to hard work paid off.  I was accepted as a student at 42, acquired a spot in the dorms, and set to work researching relevant skills and technologies that would allow me to work as a professional software developer as soon as possible. Since front end technologies were easier to learn I quickly picked up React, Redux, and RxJs and was able to start contracting for RDT Dev as a front end developer. I used what I learned as a carpenter, listening to and emulating the experienced developers at RDT to increase effectiveness and productivity quickly. This month I shipped a software system that allows greater management and control of our customer’s enterprise index repositories in Splunk."
}

export default aboutMe